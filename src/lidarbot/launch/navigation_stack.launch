<?xml version="1.0"?>
<launch>

  <!-- Add transformations. -->
  <!-- map to odom will be provided by the AMCL -->
  <!-- odom to base_link done by odomtransformer-->
     <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_laser" args="0 0 0.12 0 0 0 /base_link /laser" /> 


  <!-- Run robot model and rviz -->
  <include file="$(find mobile_robot_description)/launch/view_robot.launch"/>

  <!-- RPLidar Package -->
  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
  <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>  
  <param name="serial_baudrate"     type="int"    value="115200"/>
  <param name="frame_id"            type="string" value="laser"/>
  <param name="inverted"            type="bool"   value="false"/>
  <param name="angle_compensate"    type="bool"   value="true"/>
  </node>


  <!-- AMCL Package -->
	<node pkg="amcl" type="amcl" name="amcl">
	<param name="tf_broadcast" value="true" />
	<param name="base_frame_id" value="/base_link" />
	<param name="global_frame_id" value="/map" />
	<param name="odom_frame_id" value="/scanmatch_odom" />
	<param name="use_map_topic" value="false" />

	    <remap from="scan" to="/scan" />
	    <param name="odom_model_type" value="diff" />
	    <param name="transform_tolerance" value="0.2" />
	    <param name="gui_publish_rate" value="-1.0"/>
	    <param name="laser_max_beams" value="30"/>
	    <param name="laser_max_range" value="29.5"/>
	    <param name="min_particles" value="1"/>
	    <param name="max_particles" value="2"/>
	    <param name="update_min_d" value="0.1"/>
	    <param name="kld_err" value="0.01"/>
	    <param name="kld_z" value="0.99"/>
	    <param name="odom_alpha1" value="0.2"/>
	    <param name="odom_alpha2" value="0.2"/>
	    <param name="odom_alpha3" value="0.2"/>
	    <param name="odom_alpha4" value="0.2"/>
	    <param name="odom_alpha5" value="0.2"/>
	    <param name="laser_z_hit" value="0.95"/>
	    <param name="laser_z_short" value="0.1"/>
	    <param name="laser_z_max" value="0.05"/>
	    <param name="laser_z_rand" value="0.05"/>
	    <param name="laser_sigma_hit" value="0.2"/>
	    <param name="laser_lambda_short" value="0.1"/>
	    <param name="laser_model_type" value="likelihood_field"/>
	    <param name="laser_likelihood_max_dist" value="2.0"/>
	    <param name="update_min_a" value="0.5"/>
	    <param name="resample_interval" value="2"/>
	    <param name="transform_tolerance" value="0.1"/>
	    <param name="recovery_alpha_slow" value="0.0"/>
	    <param name="recovery_alpha_fast" value="0.0"/>
	  </node> 


  <!-- Subscribe: /initialpose, /move_base_simple/goal -->
         <!-- Publish: /initial_2d, /goal_2d -->
         <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
         </node>  


	
  <!-- HECTOR STUFF -->
  <!--Hector in this stack is used for its odometry data, not for actual mapping-->

  <arg name="tf_map_scanmatch_transform_frame_name" default="scanmatcher_frame"/>
  <arg name="base_frame" default="base_link"/>
  <arg name="odom_frame" default="base_link"/>
  <!-- Change below!! Used to be true. -->
  <!-- pub_map_odom_transform false because amcl takes care of map to odom tf-->
  <arg name="pub_map_odom_transform" default="false"/>
  <arg name="scan_subscriber_queue_size" default="5"/>
  <arg name="scan_topic" default="scan"/>
  <arg name="map_size" default="2048"/>
  <arg name="pub_odometry" default="true"/>  
  
    <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
    <param name="pub_odometry" value="$(arg pub_odometry)"/>

    <!-- Frame names -->
    <!-- Remapping Hector's map topic to mapcurrent to prevent topic overlap between map_server and Hector-->
    <remap from="map" to="mapcurrent" />
    <param name="map_frame" value="mapcurrent" />
    <param name="base_frame" value="$(arg base_frame)" />
    <param name="odom_frame" value="$(arg odom_frame)" />
    
    <!-- Tf use -->
    <param name="use_tf_scan_transformation" value="true"/>
    <param name="use_tf_pose_start_estimate" value="false"/>
    <param name="pub_map_odom_transform" value="$(arg pub_map_odom_transform)"/>
    
    <!-- Map size / start point -->
    <param name="map_resolution" value="0.050"/>
    <param name="map_size" value="$(arg map_size)"/>
    <param name="map_start_x" value="0.5"/>
    <param name="map_start_y" value="0.5" />
    <param name="map_multi_res_levels" value="2" />
    
    <!-- Map update parameters -->
    <param name="update_factor_free" value="0.4"/>
    <param name="update_factor_occupied" value="0.9" />    
    <param name="map_update_distance_thresh" value="0.4"/>
    <param name="map_update_angle_thresh" value="0.06" />
    <param name="laser_z_min_value" value = "-1.0" />
    <param name="laser_z_max_value" value = "1.0" />
    
    <!-- Advertising config --> 
    <param name="advertise_map_service" value="true"/>
    
    <param name="scan_subscriber_queue_size" value="$(arg scan_subscriber_queue_size)"/>
    <param name="scan_topic" value="$(arg scan_topic)"/>
    
    <!-- Debug parameters -->
    <!--
      <param name="output_timing" value="false"/>
      <param name="pub_drawings" value="true"/>
      <param name="pub_debug_output" value="true"/>
    -->
    <param name="tf_map_scanmatch_transform_frame_name" value="$(arg tf_map_scanmatch_transform_frame_name)" />
  </node>


  <!--ODOM TRANSFORMER-->
  <include file="$(find lidarbot)/launch/odomtransformer.launch"/>

  <!-- Arduino Serial Node -->
  <node pkg="rosserial_arduino" type="serial_node.py" name="serial_arduino">
    <param name="port" value="/dev/ttyACM0" />
    <param name="baud" value="57600" />
  </node>


  <!-- Serve the map -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find lidarbot)/maps/my_map.yaml"/>


<!-- MOVEMENT -->
  <!-- Subscribe: /move_base_simple/goal -->
  <!-- Publish: /cmd_vel -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find lidarbot)/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
    <rosparam file="$(find lidarbot)/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find lidarbot)/local_costmap_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find lidarbot)/global_costmap_params.yaml" command="load" ns="global_costmap" /> 
    <rosparam file="$(find lidarbot)/base_local_planner_params.yaml" command="load" />
  </node>


</launch>
